            # jacobian p_prime update with [0,0] the reference
            # self.p_prime[1:-1,1:-1] = (1/(c_p[1:-1,1:-1] + 1e-8)) * (
            #     c_e[1:-1,1:-1] * p_r[1:,1:-1] +
            #     c_w[1:-1,1:-1] * p_l[:-1,1:-1] + 
            #     c_n[1:-1,1:-1] * p_u[1:-1,1:] +
            #     c_s[1:-1,1:-1] * p_d[1:-1,:-1] +
            #     c_hat[1:-1,1:-1]
            # )
            # self.p_prime[1:-1,0] = (1/(c_p[1:-1,0] + 1e-8)) * (
            #     c_e[1:-1,0] * p_r[1:,0] +
            #     c_w[1:-1,0] * p_l[:-1,0] + 
            #     c_n[1:-1,0] * p_u[1:-1,0] +
            #     c_hat[1:-1,0]
            # )
            # self.p_prime[1:-1,-1] = (1/(c_p[1:-1,-1] + 1e-8)) * (
            #     c_e[1:-1,-1] * p_r[1:,-1] +
            #     c_w[1:-1,-1] * p_l[:-1,-1] + 
            #     c_s[1:-1,-1] * p_d[1:-1,-1] +
            #     c_hat[1:-1,-1]
            # )
            # self.p_prime[0,1:-1] = (1/(c_p[0,1:-1] + 1e-8)) * (
            #     c_e[0,1:-1] * p_r[0,1:-1] +
            #     c_n[0,1:-1] * p_u[0,1:] + 
            #     c_s[0,1:-1] * p_d[0,:-1] +
            #     c_hat[0,1:-1]
            # )
            # self.p_prime[-1,1:-1] = (1/(c_p[0,1:-1] + 1e-8)) * (
            #     c_w[-1,1:-1] * p_l[-1,1:-1] +
            #     c_n[-1,1:-1] * p_u[-1,1:] + 
            #     c_s[-1,1:-1] * p_d[-1,:-1] +
            #     c_hat[-1,1:-1]
            # )
            # self.p_prime[0,0] = (1/(c_p[0,0] + 1e-8)) * (
            #     c_e[0,0] * p_r[0,0] +
            #     c_n[0,0] * p_u[0,0] +
            #     c_hat[0,0]
            # )
            # self.p_prime[0,-1] = (1/(c_p[0,-1] + 1e-8)) * (
            #     c_e[0,-1] * p_r[0,-1] +
            #     c_s[0,-1] * p_d[0,-1] +
            #     c_hat[0,-1]
            # )
            # self.p_prime[-1,0] = (1/(c_p[-1,0] + 1e-8)) * (
            #     c_w[-1,0] * p_l[-1,0] +
            #     c_n[-1,0] * p_u[-1,0] +
            #     c_hat[-1,0]
            # )
            # self.p_prime[-1,-1] = (1/(c_p[-1,-1] + 1e-8)) * (
            #     c_w[-1,-1] * p_l[-1,-1] +
            #     c_s[-1,-1] * p_d[-1,-1] +
            #     c_hat[-1,-1]
            # )

            ###############################################################
            # piecewise update
            ###############################################################
            # upper half
            self.p_prime[:,101:] = inv_c_p[:,101:] * (
                c_e[:,101:] * p_r[:,101:] +
                c_w[:,101:] * p_l[:,101:] +
                c_n[:,101:] * p_u[:,101:] +
                c_s[:,101:] * p_d[:,101:] +
                c_hat[:,101:]
            )
            # lower half
            self.p_prime[:,:100] = inv_c_p[:,:100] * (
                c_e[:,:100] * p_r[:,:100] +
                c_w[:,:100] * p_l[:,:100] +
                c_n[:,:100] * p_u[:,:100] +
                c_s[:,:100] * p_d[:,:100] +
                c_hat[:,:100]
            )
            # left centerline
            self.p_prime[:100,100] = inv_c_p[:100,100] * (
                c_e[:100,100] * p_r[:100,100] +
                c_w[:100,100] * p_l[:100,100] +
                c_n[:100,100] * p_u[:100,100] +
                c_s[:100,100] * p_d[:100,100] +
                c_hat[:100,100]
            )
            # right centerline
            self.p_prime[101:,100] = inv_c_p[101:,100] * (
                c_e[101:,100] * p_r[101:,100] +
                c_w[101:,100] * p_l[101:,100] +
                c_n[101:,100] * p_u[101:,100] +
                c_s[101:,100] * p_d[101:,100] +
                c_hat[101:,100]
            )
            # neighbors of [100,100]
            # self.p_prime[99,100] = inv_c_p[99,100] * (
            #     c_w[99,100] * p_l[99,100] +
            #     c_n[99,100] * p_u[99,100] +
            #     c_s[99,100] * p_d[99,100] +
            #     c_hat[99,100]
            # )
            # self.p_prime[101,100] = inv_c_p[101,100] * (
            #     c_e[101,100] * p_r[101,100] +
            #     c_n[101,100] * p_u[101,100] +
            #     c_s[101,100] * p_d[101,100] +
            #     c_hat[101,100]
            # )
            # self.p_prime[100,101] = inv_c_p[100,101] * (
            #     c_e[100,101] * p_r[100,101] +
            #     c_n[100,101] * p_u[100,101] +
            #     c_w[100,101] * p_l[100,101] +
            #     c_hat[100,101]
            # )
            # self.p_prime[100,99] = inv_c_p[100,99] * (
            #     c_e[100,99] * p_r[100,99] +
            #     c_s[100,99] * p_d[100,99] +
            #     c_w[100,99] * p_l[100,99] +
            #     c_hat[100,99]
            # )